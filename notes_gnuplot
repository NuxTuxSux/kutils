--- questo definisce il datablock e lo plotta - perfetto, però non posso fare da sistema operativo con un singolo comando
# Imposta il tipo di terminale per visualizzare in una finestra
#set terminal wxt

# Imposta il titolo del grafico
set title "Spezzata"
unset logscale x
unset logscale y
# Imposta le etichette degli assi
set xlabel "X"
set ylabel "Y"

set xtics 0, 1, 5
set ytics 0, 1, 3
# Plotta la spezzata
$a << EOD
1 1
2 2
3 3
4 2
5 1
EOD
plot $a with lines title 'Legenda'

-- esempio minimale
$a<<E
1 1
2 2
3 2
4 1
E
plot $a with lines

--- test

"$a<<E\n1 1\n2 2\n3 2\n4 1\nE\nplot \$a with lines"


--- un comando che accetta da tastiera i punti e fa il plot
gnuplot -persist -e "unset logscale x;unset logscale y;set xlabel \"X\";set ylabel \"Y\";set xtics 0, 1, 5;set ytics 0, 1, 3;\$a << EOD;1 1;2 2;3 2;4 1;EOD;plot \$a with lines title 'Spezzata'"


-- funziona, ma passo dalla shell
echo """programma con dati""" | gnuplot -persist

--- idem, ma eseguito da k
\echo "\$a<<E\n1 1\n2 2\n3 2\n4 1\nE\nplot \$a with lines"| gnuplot -persist

-- idem, ma interpretato da k, costruisco la stringa in modo programmatico
"\\echo \"\\\$a<<E\\n1 1\\n2 2\\n3 2\\n4 1\\nE\\nplot \\\$a with lines\"\| gnuplot \-persist"

-----------

-- QUESTO RISOLVE TUTTO. Apro una sessione gnuplot e gli invio la stringa nello stdin
`x((gp;"-persist");"\$a<<E\n1 1\n2 2\n3 2\n4 1\nE\nplot \$a with lines\n")

------ TODO ------
- passare kwargs per le impostazioni dei plot
- fare il porting delle varie funzioni o fare un porting generico magari con simboli?
    il secondo è più comodo. Potrei importare come simboli una lista di funzioni e poi eseguire in modo generico (con kwargs)
